#!/bin/bash

### 功能:渲染helm tgz文件里面的原始镜像然后同步到本地仓库 ### sh isync xxx.tgz yyy.tgz  OR  sh isync 

main() {
    install_skopeo
    image_syncer $ALL_USAGE
}

##配置变量
local_registry='harbor.easzlab.io.local'
default_tag='latest'
default_repository='library'
harbor_user=admin
harbor_pass=dIzb4R6F33vmDUWj

#检查输入的参数
if [ $# -eq 0 ]; then
    #echo "Usage: $0 <helm-tgz-file>"
    #exit 1
    ALL_USAGE=$(\ls ../files/*.tgz 2>/dev/null)
else
    ALL_USAGE="$@"
fi


#生成~/.docker/config.json配置
auth_base=`echo -n "$harbor_user:$harbor_pass" | base64 -w 0`
mkdir -p ~/.docker/
\cp ~/.docker/config.json ~/.docker/config.json_$(date +%F)_isync
cat > ~/.docker/config.json <<EOF
{
	"auths": {
		"$local_registry": {
			"auth": "${auth_base}"
		}
	}
}
EOF

logger() {
  TIMESTAMP=$(date +'%Y-%m-%d %H:%M:%S')
  case "$1" in
    debug)
      echo -e "$TIMESTAMP \033[36mDEBUG\033[0m $2"
      ;;
    info)
      echo -e "$TIMESTAMP \033[32mINFO\033[0m $2"
      ;;
    warn)
      echo -e "$TIMESTAMP \033[33mWARN\033[0m $2"
      ;;
    error)
      echo -e "$TIMESTAMP \033[31mERROR\033[0m $2"
      ;;
    *)
      ;;
  esac
}

create_repo() {
    #创建repo
    response=$(curl -s -X GET --max-time 3 -H "Content-Type: application/json" -H "Authorization: Basic $auth_base" http://$local_registry/api/v2.0/projects?name=$repo)

    if [[ $response == "[]" || $response == "" ]]; then
        # 如果项目不存在，创建项目
        curl -s -X POST --max-time 3 -H "Content-Type: application/json" -H "Authorization: Basic $auth_base" \
        -d "{\"project_name\": \"${repo}\", \"public\": true}" \
        http://$local_registry/api/v2.0/projects &> /dev/null # ||  { logger error "curl创建harbor仓库失败,请检查harbor配置信息"; exit 1; }
    fi
}


install_skopeo() {
if ! command -v skopeo >/dev/null 2>&1; then
    logger info "正在下载同步工具skopeo"
    #export https_proxy='xxx.xxx.68.185:3128'
    #export http_proxy='xxx.xxx.68.185:3128'
    yum -y install skopeo && logger info "skopeo安装成功"
fi
}


image_syncer() {

    if ! which helm >/dev/null 2>&1 ;then
        logger error "请安装helm"
        exit 1
    fi
>isync.log
for tgz_file in "$@"; do
    if [[ "$tgz_file" == *.tgz ]]; then
        helm template "$tgz_file" | awk '/image:/ && NF && $1 !~ /^#/ {
            if ($2 == "") {
                getline; 
                if ($0 ~ /[a-zA-Z0-9_.-]+:[a-zA-Z0-9_.-]+|[a-zA-Z0-9]+\/[a-zA-Z0-9_.-]+:[a-zA-Z0-9_.-]+/) print $0 
            } else {
                if ($2 ~ /[a-zA-Z0-9_.-]+:[a-zA-Z0-9_.-]+|[a-zA-Z0-9]+\/[a-zA-Z0-9_.-]+:[a-zA-Z0-9_.-]+/) print $2 
            } 
        }' | sed "s/[\"']//g"  | while IFS= read -r image; do
                                        old_image=$image
                                        if [[ $(echo $image | grep -o "/" | wc -l) -gt 1 ]]; then
                                            if [[ $image == *:* ]]; then
                                                # 处理带标签的镜像
                                                modified_image=${image#*/}
                                                new_image=$local_registry/$modified_image
                                            else
                                                # 处理没有标签的镜像
                                                modified_image=${image#*/}
                                                new_image=$local_registry/$modified_image:$default_tag
                                            fi
                                        elif [[ $(echo $image | grep -o "/" | wc -l) -eq 1 ]]; then
                                            if [[ $image == *:* ]]; then
                                                # 处理带标签的镜像
                                                new_image=$local_registry/$image
                                            else
                                                # 处理没有标签的镜像
                                                new_image=$local_registry/$image:$default_tag
                                            fi
                                        else
                                            if [[ $image == *:* ]]; then
                                                # 处理带标签的镜像
                                                new_image=$local_registry/$default_repository/$image
                                            else
                                                # 处理没有标签的镜像
                                                new_image=$local_registry/$default_repository/$image:$default_tag
                                               # echo $old_image: $new_image
                                            fi
                                        fi
                                        repo=$(echo "$new_image" | cut -d'/' -f2)
                                        create_repo
                                        echo "skopeo sync --src docker --dest docker --dest-tls-verify=false $old_image $local_registry/$repo" | bash
                                        if [ $? -ne 0 ];then
                                            logger error "同步失败  $old_image ======>  $local_registry/$repo" >> isync.log
                                        else
                                            logger info  "同步成功  $old_image ======>  $local_registry/$repo" >> isync.log
                                        fi
                                    done

    else
        continue
    fi
done

}

main