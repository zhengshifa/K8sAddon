apiVersion: batch/v1
kind: CronJob
metadata:
  name: rabbitmq-test
  namespace: "${namespace}"
spec:
  concurrencyPolicy: Allow
  failedJobsHistoryLimit: 0
  jobTemplate:
    metadata:
      creationTimestamp: null
    spec:
      template:
        metadata:
          creationTimestamp: null
        spec:
          containers:
          - name: rabbitmq-test-container
            image: harbor.example.com/library/rabbitmq:3.11.10-management
            command:
            - sh
            - -c
            - |
              #!/bin/bash
              
              # 设置 RabbitMQ 的相关配置
              RABBITMQ_HOST=rabbitmq-0.rabbitmq.rabbitmq
              RABBITMQ_PORT=15672
              RABBITMQ_USERNAME=guest
              RABBITMQ_PASSWORD=guest
              RABBITMQ_QUEUE=test_queue
              
              # 创建一个测试队列
              rabbitmqadmin declare queue durable=true --host=$RABBITMQ_HOST --port=$RABBITMQ_PORT --username=$RABBITMQ_USERNAME --password=$RABBITMQ_PASSWORD name=$RABBITMQ_QUEUE
              # 检查队列创建是否成功
              if [ $? -eq 0 ]; then
                echo "Queue $RABBITMQ_QUEUE created successfully"
              else
                echo "Failed to create queue $RABBITMQ_QUEUE"
                exit 1
              fi
              
              # 发布一条测试消息到队列
              rabbitmqadmin publish --host=$RABBITMQ_HOST --port=$RABBITMQ_PORT --username=$RABBITMQ_USERNAME --password=$RABBITMQ_PASSWORD  routing_key=$RABBITMQ_QUEUE payload="Hello, RabbitMQ"
              
              sleep 5
              
              # 检查消息是否被成功发布
              rabbitmqadmin get queue=$RABBITMQ_QUEUE --host=$RABBITMQ_HOST --port=$RABBITMQ_PORT --username=$RABBITMQ_USERNAME --password=$RABBITMQ_PASSWORD | grep -i hello
              if [ $? -eq 0 ]; then
                echo "Message published successfully"
              else
                echo "Failed to publish message"
                exit 1
              fi
              
              
              # 删除测试队列
              rabbitmqadmin delete queue --host=$RABBITMQ_HOST --port=$RABBITMQ_PORT --username=$RABBITMQ_USERNAME --password=$RABBITMQ_PASSWORD name=$RABBITMQ_QUEUE
              
              # 检查队列删除是否成功
              if [ $? -eq 0 ]; then
                echo "Queue $RABBITMQ_QUEUE deleted successfully"
              else
                echo "Failed to delete queue $RABBITMQ_QUEUE"
                exit 1
              fi
              
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: OnFailure
          schedulerName: default-scheduler
          terminationGracePeriodSeconds: 30
  schedule: "${services_test_schedule}"
  successfulJobsHistoryLimit: 1
  suspend: false
